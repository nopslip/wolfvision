// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Claimed extends ethereum.Event {
  get params(): Claimed__Params {
    return new Claimed__Params(this);
  }
}

export class Claimed__Params {
  _event: Claimed;

  constructor(event: Claimed) {
    this._event = event;
  }

  get index(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TokenDistributorV2 extends ethereum.SmartContract {
  static bind(address: Address): TokenDistributorV2 {
    return new TokenDistributorV2("TokenDistributorV2", address);
  }

  confirmMessage(
    user_id: BigInt,
    user_address: Address,
    user_amount: BigInt,
    eth_signed_message_hash_hex: Bytes
  ): boolean {
    let result = super.call(
      "confirmMessage",
      "confirmMessage(uint32,address,uint256,bytes32):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(user_id),
        ethereum.Value.fromAddress(user_address),
        ethereum.Value.fromUnsignedBigInt(user_amount),
        ethereum.Value.fromFixedBytes(eth_signed_message_hash_hex)
      ]
    );

    return result[0].toBoolean();
  }

  try_confirmMessage(
    user_id: BigInt,
    user_address: Address,
    user_amount: BigInt,
    eth_signed_message_hash_hex: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "confirmMessage",
      "confirmMessage(uint32,address,uint256,bytes32):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(user_id),
        ethereum.Value.fromAddress(user_address),
        ethereum.Value.fromUnsignedBigInt(user_amount),
        ethereum.Value.fromFixedBytes(eth_signed_message_hash_hex)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hashMatch(
    _user_id: BigInt,
    _user_address: Address,
    _user_amount: BigInt,
    eth_signed_message_hash_hex: Bytes
  ): boolean {
    let result = super.call(
      "hashMatch",
      "hashMatch(uint32,address,uint256,bytes32):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_user_id),
        ethereum.Value.fromAddress(_user_address),
        ethereum.Value.fromUnsignedBigInt(_user_amount),
        ethereum.Value.fromFixedBytes(eth_signed_message_hash_hex)
      ]
    );

    return result[0].toBoolean();
  }

  try_hashMatch(
    _user_id: BigInt,
    _user_address: Address,
    _user_amount: BigInt,
    eth_signed_message_hash_hex: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hashMatch",
      "hashMatch(uint32,address,uint256,bytes32):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_user_id),
        ethereum.Value.fromAddress(_user_address),
        ethereum.Value.fromUnsignedBigInt(_user_amount),
        ethereum.Value.fromFixedBytes(eth_signed_message_hash_hex)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isClaimed(index: BigInt): boolean {
    let result = super.call("isClaimed", "isClaimed(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toBoolean();
  }

  try_isClaimed(index: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isClaimed", "isClaimed(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isSigned(
    eth_signed_message_hash_hex: Bytes,
    eth_signed_signature_hex: Bytes
  ): boolean {
    let result = super.call("isSigned", "isSigned(bytes32,bytes):(bool)", [
      ethereum.Value.fromFixedBytes(eth_signed_message_hash_hex),
      ethereum.Value.fromBytes(eth_signed_signature_hex)
    ]);

    return result[0].toBoolean();
  }

  try_isSigned(
    eth_signed_message_hash_hex: Bytes,
    eth_signed_signature_hex: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("isSigned", "isSigned(bytes32,bytes):(bool)", [
      ethereum.Value.fromFixedBytes(eth_signed_message_hash_hex),
      ethereum.Value.fromBytes(eth_signed_signature_hex)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  signer(): Address {
    let result = super.call("signer", "signer():(address)", []);

    return result[0].toAddress();
  }

  try_signer(): ethereum.CallResult<Address> {
    let result = super.tryCall("signer", "signer():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _signer(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ClaimTokensCall extends ethereum.Call {
  get inputs(): ClaimTokensCall__Inputs {
    return new ClaimTokensCall__Inputs(this);
  }

  get outputs(): ClaimTokensCall__Outputs {
    return new ClaimTokensCall__Outputs(this);
  }
}

export class ClaimTokensCall__Inputs {
  _call: ClaimTokensCall;

  constructor(call: ClaimTokensCall) {
    this._call = call;
  }

  get user_id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get user_address(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get user_amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get eth_signed_message_hash_hex(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get eth_signed_signature_hex(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class ClaimTokensCall__Outputs {
  _call: ClaimTokensCall;

  constructor(call: ClaimTokensCall) {
    this._call = call;
  }
}

export class HashMatchCall extends ethereum.Call {
  get inputs(): HashMatchCall__Inputs {
    return new HashMatchCall__Inputs(this);
  }

  get outputs(): HashMatchCall__Outputs {
    return new HashMatchCall__Outputs(this);
  }
}

export class HashMatchCall__Inputs {
  _call: HashMatchCall;

  constructor(call: HashMatchCall) {
    this._call = call;
  }

  get _user_id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _user_address(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _user_amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get eth_signed_message_hash_hex(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class HashMatchCall__Outputs {
  _call: HashMatchCall;

  constructor(call: HashMatchCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
